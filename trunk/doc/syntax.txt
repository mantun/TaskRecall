+Grammar:

++Meta symbols meaning:
<non-terminal>        - non-terminal symbol
'terminal'            - terminal symbol
<non-terminal> -> ... - production
[optional]            - content is optional
option1 | option2     - alternatives

++Productions

<reminder text> -> <sequence>      // the sequence is evaluated and the result is the last item
<sequence> -> ''
<sequence> -> <item> [' ' <sequence>]

<item> -> <number>
<item> -> <time>
<item> -> <date>
<item> -> <timestamp>
<item> -> <identifier>
<item> -> <list>

// Be aware that changing Regional Settigs may prevent the data file from opening
<time> -> <hh> ':' <mm> ':' <ss>    // Regional time separator is used, 24h time
<date> -> <dd> '.' <mm> '.' <yyyy>  // Regional short date format is used
<timestamp> -> <dd> '.' <mm> '.' <yyyy> ',' <hh> ':' <mm> ':' <ss> // Regional date/time format is used, ',' is in fact the list separator and is replaced by ' ' upon parsing 
<number> -> ['+' | '-'] <digits>
<list> -> '(' <sequence> ')'

<hh> -> <digits>                    // must represent valid time
<mm> -> <digits>                    // must represent valid time
<ss> -> <digits>                    // must represent valid time
<dd> -> <digits>                    // must represent valid date
<mm> -> <digits>                    // must represent valid date
<yyyy> -> <digits>                  // must represent valid date

<digits> -> ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [<digits>]

+Evaluation rules:

<sequence> - All items are evaluated from left to right and the result is the value of the last item.
<list> - The head of the list is evaluated and if it is a function, the function is called using the tail of the list as actual arguments. The actual arguments are not pre-evaluated upon calling, they may be evaluated in the body as needed.
<identifier> - Identifier is looked up in user-defined names and then in predefined names. If an identifier is defined within a function, its scope is local to the function. Formal arguments are also local to the function. If the same identifier is defined twice, the second definition hides the first one (only in the scope of the second). The scope of an identifier spans in all functions called from within that scope.

+Predefined names:

++Meta symbols meaning:
<:time> - time/date/both expression
<#int>  - integer expression
<~bool> - boolean expression
<@name> - atom identifier (not expression)
<.list> - list expression
<any>   - arbitrary expression
= :     - returns time
= #     - returns integer
= ~     - returns boolean
= .     - returns list
= ?     - returns multiple types, see description
...     - repetition

Note: every expression is evaluated upon function execution, except when noted otherwise.

++List of predefined names

true = ~   - const true
false = ~  - const false

(define <@name> <value>) = ?       - defines alias for the value, returns value
(lambda ([<@formalarg1> ...]) <value1> [<value2> ...]) = <function>
        - creates a function, which evaluates all expressions in its body when called and returns the result of the last one. Defining the function does not evaluate any expression in its body.

(list [<value1> ...]) = .          - creates a list of values (they are not evaluated)
(head <.list>) = ?                 - returns the first element of a list, not evaluated
(tail <.list>) = .                 - returns list of all elements in the list except the first one
(empty? <.list>) = ~               - returns true if the list is empty
(cons <first> <second>) = .        - returns list of the two arguments
(cons <head> <.tail>) = .          - attaches the head to the tail

(= <value1> [<value2> ...]) = ~            - returns true if all values are equal
(in <value> [<value1> ...]) = ~            - returns true if 'value' is equal to one of the following values
(between <value> <bound1> <bound2>) = ~    - returns true if value >= bound1 and value <= bound2
(>= <value1> <value2>) = ~                 - returns true if value1 >= value2
(<= <value1> <value2>) = ~                 - returns true if value1 <= value2

(if <~cond> <value1> <value2>) = ?   - evaluates and returns value1 if condition is true and value2 otherwise
(and <~value1> [<~value2> ...]) = ~  - returns true if all values are true
(or <~value1> [<~value2> ...]) = ~   - returns true if any value is true
(not <~value>) = ~                   - returns true if value is false

(+ <#value1> [<#value2> ...]) = #    - returns the sum of the values
(- <#value1> <#value2>) = #          - returns value1 - value2
(* <#value1> [<#value2> ...]) = #    - returns the product of the values
(/ <#value1> [<#value2> ...]) = #    - returns value1 / value2
(% <#value1> <#value2>) = #          - returns value1 % value2
(abs <#value>) = #                   - returns the absolute value if the argument

(now) = :                                      - current time and date
(ts <:date> <:time>) = :                       - make timestamp from given date and time
(ts <~bool> <:time>) = :                       - make timestamp from given time and today if bool is true. If bool is false returns zero time.
(seq <:time1> [<:time2> ...]) = :              - returns the closest time to current time from the given times
(seq <:date1> [<:date2> ...]) = :              - returns the closest date to now from the given dates
(seq <:timestamp1> [<:timestamp2> ...]) = :    - returns the closest timestamp to now from the given timestamps

(time [<:timestamp>]) = :              - extract time from given/current time
(hour [<:time>]) = #                   - hour of given/current time
(min [<:time>]) = #                    - minute of given/current time
(sec [<:time>]) = #                    - minute of given/current time
(hms <#hour> [<#min>] [<#sec>]) = :    - returns the specified time

(date [<:timestamp>]) = :              - extract date/current date
(day [<:date>]) = #                    - day of given/current date
(month [<:date>]) = #                  - month of given/current date
(year [<:date>]) = #                   - year of given/current date
(dow [<:date>]) = #                    - day of week of given/current date
(doy [<:date>]) = #                    - day of year of given/current date
(eom [<:date>]) = :                    - returns date that is at the end of the month of the given date; time is unaffected
(dmy <#day> <#month> [<#year>]) = :    - returns the specified date

(move-day <:date> <#offset>) = :       - moves the date some days forward or backward
(move-month <:date> <#offset>) = :     - moves the date some months forward or backward
(move-year <:date> <#offset>) = :      - moves the date some years forward or backward
(move-hour <:date> <#offset>) = :      - moves the date some hours forward or backward
(move-min <:date> <#offset>) = :       - moves the date some minutes forward or backward

+++Special names
sd = :                        - Task's Start Date/Time (available only for task reminders)
ed = :                        - Task's End Date/Time (available only for task reminders)
(set-start <:timestamp>) = :  - Sets Task's Start Date/Time (available only in task's 'On Dismiss' field)
(set-end <:timestamp>) - :    - Sets Task's End Date/Time (available only in task's 'On Dismiss' field)

